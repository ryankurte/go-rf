package rf

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

// Terrain points from RL scenario
var terrain = []float64{14.6, 14.6, 14.6, 14.2, 14.2, 14.2, 14.2, 14.7, 14.2, 14.2, 14.2, 14.2, 14.2, 13.8, 14.2, 14.2, 14.2, 14.2, 13.8, 13.8, 13.8, 14.3, 13.8, 13.8, 13.8, 13.8, 13.8, 13.4, 13.9, 13.9, 13.9, 13.9, 13.4, 13.4, 13.4, 13.9, 13.9, 13.4, 13.4, 13.4, 13.4, 13.4, 13.5, 13.5, 13.5, 13.5, 13.5, 13.0, 13.0, 13.5, 13.5, 13.5, 13.1, 13.1, 13.1, 13.1, 13.6, 13.1, 13.1, 13.1, 13.1, 13.1, 12.7, 13.2, 13.2, 13.2, 12.8, 12.8, 12.8, 12.8, 13.3, 12.9, 12.9, 12.9, 12.9, 12.9, 12.5, 13.0, 13.0, 13.0, 13.0, 12.6, 12.6, 12.6, 13.1, 13.1, 12.7, 12.7, 12.7, 12.7, 12.7, 12.8, 12.8, 12.8, 12.8, 12.8, 12.4, 12.4, 12.9, 12.9, 12.9, 12.5, 12.5, 12.5, 12.5, 13.0, 12.6, 12.6, 12.6, 12.6, 12.1, 12.1, 12.6, 12.6, 12.6, 12.2, 12.2, 12.2, 12.2, 12.7, 12.2, 12.2, 12.2, 12.2, 12.2, 11.8, 12.2, 12.2, 12.2, 12.2, 11.8, 11.8, 11.8, 12.2, 12.2, 11.7, 11.7, 11.7, 11.7, 11.7, 11.5, 11.5, 11.5, 11.5, 11.5, 11.0, 11.0, 11.4, 11.4, 10.8, 10.8, 10.8, 10.8, 10.8, 10.6, 10.6, 10.6, 10.6, 10.6, 10.0, 10.0, 10.4, 10.4, 10.4, 9.8, 9.8, 9.8, 10.2, 10.2, 9.6, 9.6, 9.6, 9.6, 9.6, 9.5, 9.5, 9.5, 9.5, 9.5, 9.0, 9.0, 9.4, 9.4, 9.4, 8.9, 8.9, 8.9, 8.9, 9.4, 8.9, 8.9, 8.9, 8.9, 8.4, 8.4, 8.9, 8.9, 8.9, 8.5, 8.5, 8.5, 8.5, 9.0, 8.5, 8.5, 8.5, 8.5, 8.5, 8.0, 8.5, 8.5, 8.5, 8.5, 8.1, 8.1, 8.1, 8.6, 8.6, 8.1, 8.1, 8.1, 8.1, 8.1, 8.1, 8.1, 8.1, 8.1, 8.1, 7.6, 7.6, 8.1, 8.1, 8.1, 7.6, 7.6, 7.6, 7.6, 7.5, 7.5, 7.5, 7.5, 7.5, 7.1, 7.1, 7.4, 7.4, 7.4, 7.0, 7.0, 7.0, 7.0, 7.3, 6.9, 6.9, 6.9, 6.9, 6.9, 6.5, 6.8, 6.8, 6.8, 6.8, 6.4, 6.4, 6.4, 6.7, 6.7, 6.4, 6.4, 6.4, 6.4, 6.4, 6.3, 6.3, 6.3, 6.3, 6.3, 5.9, 5.9, 6.2, 6.2, 5.9, 5.9, 5.9, 5.9, 5.9, 5.8}

// Nodes mounted 1m above terrain
var alt1 = 15.6
var alt2 = 6.8

var distance = 275.9343

func TestExample(t *testing.T) {

	terrain = SmoothN(3, terrain)

	GraphBullingtonFigure12("graph-absolute.png", false, alt1, alt2, Distance(distance), terrain)
	GraphBullingtonFigure12("graph-normalised.png", true, alt1, alt2, Distance(distance), terrain)

	x, y, d := TerrainToPathXY(alt1, alt2, Distance(distance), terrain)

	d1, d2, h := BullingtonFigure12Method(x, y, Distance(d))
	assert.InDelta(t, 141.85, d1, 0.01)
	assert.InDelta(t, 134.23, d2, 0.01)
	assert.InDelta(t, 0.58, h, 0.01)

	v, err := CalculateFresnelKirckoffDiffractionParam(433*MHz, Distance(d1), Distance(d2), Distance(h))
	assert.Nil(t, err)
	assert.InDelta(t, 0.12, v, 0.01)

	attenuation, err := CalculateFresnelKirchoffLossApprox(v)
	assert.Nil(t, err)
	assert.InDelta(t, 7.06, float64(attenuation), 0.01)
}
